(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"), require("@angular/forms"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core", "@angular/forms"], factory);
	else if(typeof exports === 'object')
		exports["ng2-directive-utils"] = factory(require("@angular/core"), require("@angular/forms"));
	else
		root["ng2-directive-utils"] = factory(root["@angular/core"], root["@angular/forms"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__angular_forms__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__input_mask__ = __webpack_require__(6);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InputMask; });
/**
 * Created by George Frick on 2/5/2017.
 * input-mask="**-**-****" // ssn excample
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var InputMask = (function () {
    function InputMask(formControl, ele) {
        this.formControl = formControl;
        this.ele = ele;
        this.inputMask = null;
    }
    Object.defineProperty(InputMask.prototype, "mask", {
        set: function (value) {
            this._mask = value;
            if (this._mask) {
                this.inputMask = new __WEBPACK_IMPORTED_MODULE_2__input_mask__["a" /* InputMaskModel */](this._mask);
            }
        },
        enumerable: true,
        configurable: true
    });
    InputMask.prototype.onInputChange = function () {
        this.update();
    };
    InputMask.prototype.setInitialCaretPosition = function () {
        if (!this.inputMask) {
            return;
        }
        this.ele.nativeElement.selectionStart = 0;
        var value = this.formControl.value || "";
        this.ele.nativeElement.selectionEnd = value.length;
    };
    InputMask.prototype.update = function () {
        if (!this.inputMask) {
            return;
        }
        var caretPosition = this.ele.nativeElement.selectionStart;
        this.modelValue = this.inputMask.unmaskValue(this.formControl.value);
        this.viewValue = this.inputMask.maskValue(this.modelValue);
        this.formControl.viewToModelUpdate(this.inputMask.realValue(this.viewValue));
        this.formControl.valueAccessor.writeValue(this.inputMask.realValue(this.viewValue));
        caretPosition = this.inputMask.getNextCaretPosition(this.viewValue, caretPosition);
        this.ele.nativeElement.selectionStart = caretPosition;
        this.ele.nativeElement.selectionEnd = caretPosition;
    };
    return InputMask;
}());
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])("input-mask"),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], InputMask.prototype, "mask", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])("input"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputMask.prototype, "onInputChange", null);
__decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])("click"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputMask.prototype, "setInitialCaretPosition", null);
InputMask = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: "[input-mask]"
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__angular_forms__["NgControl"],
        __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]])
], InputMask);



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__angular_forms__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LowercaseDirective; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var LowercaseDirective = (function () {
    function LowercaseDirective(ctrl) {
        this.ctrl = ctrl;
    }
    LowercaseDirective.prototype.onInputChange = function () {
        var newValue = this.ctrl.value.toUpperCase();
        this.ctrl.reset(newValue);
    };
    return LowercaseDirective;
}());
LowercaseDirective = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: "[lowercase]",
        host: {
            "(input)": "onInputChange()"
        }
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__angular_forms__["NgControl"]])
], LowercaseDirective);



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__angular_forms__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UppercaseDirective; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var UppercaseDirective = (function () {
    function UppercaseDirective(ctrl) {
        this.ctrl = ctrl;
    }
    UppercaseDirective.prototype.onInputChange = function () {
        var newValue = this.ctrl.value.toLowerCase();
        this.ctrl.reset(newValue);
    };
    return UppercaseDirective;
}());
UppercaseDirective = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"])({
        selector: "[uppercase]",
        host: {
            "(input)": "onInputChange()"
        }
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__angular_forms__["NgControl"]])
], UppercaseDirective);



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_input_mask_directive__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_lowercase_directive__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_uppercase_directive__ = __webpack_require__(4);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__src_input_mask_directive__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__src_uppercase_directive__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__src_lowercase_directive__["a"]; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DirectiveUtilModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var DirectiveUtilModule = DirectiveUtilModule_1 = (function () {
    function DirectiveUtilModule() {
    }
    DirectiveUtilModule.forRoot = function () {
        return {
            ngModule: DirectiveUtilModule_1
        };
    };
    return DirectiveUtilModule;
}());
DirectiveUtilModule = DirectiveUtilModule_1 = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        declarations: [
            __WEBPACK_IMPORTED_MODULE_1__src_input_mask_directive__["a" /* InputMask */], __WEBPACK_IMPORTED_MODULE_2__src_lowercase_directive__["a" /* LowercaseDirective */], __WEBPACK_IMPORTED_MODULE_3__src_uppercase_directive__["a" /* UppercaseDirective */]
        ],
        exports: [
            __WEBPACK_IMPORTED_MODULE_1__src_input_mask_directive__["a" /* InputMask */], __WEBPACK_IMPORTED_MODULE_2__src_lowercase_directive__["a" /* LowercaseDirective */], __WEBPACK_IMPORTED_MODULE_3__src_uppercase_directive__["a" /* UppercaseDirective */]
        ]
    })
], DirectiveUtilModule);

var DirectiveUtilModule_1;


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InputMaskModel; });
/**
 * Created by George Frick on 2/5/2017.
 */
var InputMaskModel = (function () {
    function InputMaskModel(maskPattern) {
        this.originalStringPattern = maskPattern;
        this.dividerCharacterSet = this.extractDividers(maskPattern);
    }
    Object.defineProperty(InputMaskModel.prototype, "originalPattern", {
        get: function () {
            return this.originalStringPattern;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputMaskModel.prototype, "dividerCharSet", {
        get: function () {
            return this.dividerCharacterSet;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputMaskModel.prototype, "placeHolderCount", {
        /**
         * Count the number of place holder values in the original pattern.
         * @returns {number}
         */
        get: function () {
            return (this.originalPattern.match(/\*/g) || []).length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create an array representing all of the placeholder characters used
     * in the pattern. Currently this is anything not "$" and at least ["_"]
     * @param originalPattern
     * @returns {string[]}
     */
    InputMaskModel.prototype.extractDividers = function (originalPattern) {
        var dividers = originalPattern.replace(/\*/g, "").split("");
        //  dividers.push("_");
        return dividers;
    };
    /**
     * Is a given character a divider character?
     * @param character
     * @returns {boolean}
     */
    InputMaskModel.prototype.isDivider = function (character) {
        for (var dividerSetLoop = 0; dividerSetLoop < this.dividerCharSet.length; dividerSetLoop++) {
            if (character === this.dividerCharSet[dividerSetLoop]) {
                return true;
            }
        }
        return false;
    };
    Object.defineProperty(InputMaskModel.prototype, "maskedPattern", {
        /**
         * will turn X$$$X => X{0}{1}{2}X
         * @param patternString
         * @returns  X$$$X => X{0}{1}{2}X
         */
        get: function () {
            var generatedPattern = this.originalPattern;
            for (var patternIndex = 0; patternIndex < this.placeHolderCount; patternIndex++) {
                generatedPattern = generatedPattern.replace(/\*/, "{" + patternIndex + "}");
            }
            return generatedPattern;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Given a non-masked value; use the maskedPattern to create a masked value.
     * @param nonMaskedValue
     * @returns {string}
     */
    InputMaskModel.prototype.maskValue = function (nonMaskedValue) {
        var formattedString = this.maskedPattern;
        var replacement;
        var inputValue = nonMaskedValue || "";
        inputValue = this.unmaskValue(inputValue);
        for (var i = 0; i < this.placeHolderCount; i++) {
            replacement = inputValue.charAt(i) || "_";
            formattedString = formattedString.replace("{" + i + "}", replacement);
        }
        return formattedString;
    };
    /**
     * This is the current value when dividers are removed
     * @returns 9-5_1 => 951
     */
    InputMaskModel.prototype.unmaskValue = function (inputValue) {
        if (!inputValue) {
            return "";
        }
        var modelValue = inputValue;
        for (var dividerIndex = 0; dividerIndex < this.dividerCharSet.length; dividerIndex++) {
            while (modelValue.indexOf(this.dividerCharSet[dividerIndex]) > -1) {
                modelValue = modelValue.replace(this.dividerCharSet[dividerIndex], "");
            }
        }
        return modelValue.replace(/_/g, "");
    };
    /**
     * This is the current value when place holders are removed
     * @returns 9-5_ => 9-5
     */
    InputMaskModel.prototype.realValue = function (inputValue) {
        if (!inputValue || this.unmaskValue(inputValue) === "") {
            return "";
        }
        else {
            return inputValue.replace(/[*_]/g, "");
        }
    };
    InputMaskModel.prototype.getNextCaretPosition = function (viewValue, currentCaretPosition) {
        // Cursor can always be at 0.
        if (currentCaretPosition <= 0) {
            return 0;
        }
        // Cursor can't be positioned after a spacer.
        var firstSpacer = viewValue.indexOf("_");
        if (firstSpacer >= 0 && firstSpacer < currentCaretPosition) {
            return firstSpacer;
        }
        // Cursor
        while (this.isDivider(viewValue.charAt(currentCaretPosition))) {
            currentCaretPosition++;
        }
        return currentCaretPosition;
    };
    return InputMaskModel;
}());



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(5);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "DirectiveUtilModule", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "InputMask", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "UppercaseDirective", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "LowercaseDirective", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["d"]; });



/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,