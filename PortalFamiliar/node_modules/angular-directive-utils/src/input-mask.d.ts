/**
 * Created by George Frick on 2/5/2017.
 */
export declare class InputMaskModel {
    private dividerCharacterSet;
    private originalStringPattern;
    constructor(maskPattern: string);
    readonly originalPattern: string;
    readonly dividerCharSet: string[];
    /**
     * Count the number of place holder values in the original pattern.
     * @returns {number}
     */
    readonly placeHolderCount: number;
    /**
     * Create an array representing all of the placeholder characters used
     * in the pattern. Currently this is anything not "$" and at least ["_"]
     * @param originalPattern
     * @returns {string[]}
     */
    extractDividers(originalPattern: string): Array<string>;
    /**
     * Is a given character a divider character?
     * @param character
     * @returns {boolean}
     */
    isDivider(character: string): boolean;
    /**
     * will turn X$$$X => X{0}{1}{2}X
     * @param patternString
     * @returns  X$$$X => X{0}{1}{2}X
     */
    readonly maskedPattern: string;
    /**
     * Given a non-masked value; use the maskedPattern to create a masked value.
     * @param nonMaskedValue
     * @returns {string}
     */
    maskValue(nonMaskedValue: string): string;
    /**
     * This is the current value when dividers are removed
     * @returns 9-5_1 => 951
     */
    unmaskValue(inputValue: string): string;
    /**
     * This is the current value when place holders are removed
     * @returns 9-5_ => 9-5
     */
    realValue(inputValue: string): string;
    getNextCaretPosition(viewValue: string, currentCaretPosition: number): number;
}
