/**
 * Created by George Frick on 2/5/2017.
 * input-mask="**-**-****" // ssn excample
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, HostListener, Input } from "@angular/core";
import { NgControl } from "@angular/forms";
import { InputMaskModel } from "./input-mask";
var InputMask = (function () {
    function InputMask(formControl, ele) {
        this.formControl = formControl;
        this.ele = ele;
        this.inputMask = null;
    }
    Object.defineProperty(InputMask.prototype, "mask", {
        set: function (value) {
            this._mask = value;
            if (this._mask) {
                this.inputMask = new InputMaskModel(this._mask);
            }
        },
        enumerable: true,
        configurable: true
    });
    InputMask.prototype.onInputChange = function () {
        this.update();
    };
    InputMask.prototype.setInitialCaretPosition = function () {
        if (!this.inputMask) {
            return;
        }
        this.ele.nativeElement.selectionStart = 0;
        var value = this.formControl.value || "";
        this.ele.nativeElement.selectionEnd = value.length;
    };
    InputMask.prototype.update = function () {
        if (!this.inputMask) {
            return;
        }
        var caretPosition = this.ele.nativeElement.selectionStart;
        this.modelValue = this.inputMask.unmaskValue(this.formControl.value);
        this.viewValue = this.inputMask.maskValue(this.modelValue);
        this.formControl.viewToModelUpdate(this.inputMask.realValue(this.viewValue));
        this.formControl.valueAccessor.writeValue(this.inputMask.realValue(this.viewValue));
        caretPosition = this.inputMask.getNextCaretPosition(this.viewValue, caretPosition);
        this.ele.nativeElement.selectionStart = caretPosition;
        this.ele.nativeElement.selectionEnd = caretPosition;
    };
    return InputMask;
}());
__decorate([
    Input("input-mask"),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], InputMask.prototype, "mask", null);
__decorate([
    HostListener("input"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputMask.prototype, "onInputChange", null);
__decorate([
    HostListener("click"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputMask.prototype, "setInitialCaretPosition", null);
InputMask = __decorate([
    Directive({
        selector: "[input-mask]"
    }),
    __metadata("design:paramtypes", [NgControl,
        ElementRef])
], InputMask);
export { InputMask };
